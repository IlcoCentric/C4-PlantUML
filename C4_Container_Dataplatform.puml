@startuml "C4_Container_Dataplatform"
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Deployment.puml
!pragma layout smetana

'LAYOUT_TOP_DOWN()
LAYOUT_WITH_LEGEND()

title Centric Dataplatform Container landscape with DataIku


Person_Ext(customer, "Gemeente", "Gemeente met behoefte voor dataplatform")

System_Ext(saas, "dataplatform", "Dataplatform SaaS service")

Enterprise_Boundary(dataplatform, "Dataplatform"){
    System_Boundary(dataikuA, "Gemeente A", "DataIku instance"){
      Container(fleetmanagerA, "Fleet Manager", "DataIku", "Facilitate deployment of DataIku cluster resources")
      Container(dssnodesA, "DSS nodes", "Azure AKS", "Nodes that run the DataIku software")
      ContainerDb(datapoolA, "Data pool","Microsoft SQL, Azure Datalake", "Holds data to build models")
    }
    System_Boundary(dataikuB, "Gemeente B", "DataIku instance"){
      Container(fleetmanagerB, "Fleet Manager", "DataIku", "Facilitate deployment of DataIku cluster resources")
      Container(dssnodesB, "DSS nodes", "Azure AKS", "Nodes that run the DataIku software")
      ContainerDb(datapoolB, "Data pool","Microsoft SQL, Azure Datalake", "Holds data to build models")
    }
    System_Boundary(dataikuC, "Gemeente C", "DataIku instance"){
      Container(fleetmanagerC, "Fleet Manager", "DataIku", "Facilitate deployment of DataIku cluster resources")
      Container(dssnodesC, "DSS nodes", "Azure AKS", "Nodes that run the DataIku software")
      ContainerDb(datapoolC, "Data pool","Microsoft SQL, Azure Datalake", "Holds data to build models")
    }
    System_Boundary(centricVAS, "Centric", "Vallue Added Services"){
      ContainerDb(datalake, "Datalake", "ADLS Gen2, Delta lake", "Shared datalake")
      ContainerDb(datastorage, "Data storage", "Microsoft SQL", "Shared data storage")
      Container(datavisual, "Data Visualization", "PowerBI", "Visualizing the results")
      Container(elasticcompute, "Elastic Compute","AKS, Spark, Jupyter, Webapps", "Doing the compute")
    }
    System_Boundary(integration, "Integration", "Centric developed service for integration"){
      Container(discovery, "Discovery", "...", "Discover data")
      Container(share, "Share/Invite", "technology", "invitation for and sharing of data")
    }
}

Rel(fleetmanagerA, dssnodesA, "deploys", "ARM templates")
Rel(dssnodesA, datapoolA, "uses data from", "JDBC, Build-in connector, Plugin")
Rel(fleetmanagerB, dssnodesB, "deploys", "ARM templates")
Rel(dssnodesB, datapoolB, "uses data from", "JDBC, Build-in connector, Plugin")
Rel(fleetmanagerC, dssnodesC, "deploys", "ARM templates")
Rel(dssnodesC, datapoolC, "uses data from", "JDBC, Build-in connector, Plugin")
Rel_D(dssnodesA, discovery, "uses data from", "JDBC")
Rel_D(dssnodesB, discovery, "uses data from", "JDBC")
Rel_D(dssnodesC, discovery, "uses data from", "JDBC")
'Rel_D(elasticcompute, discovery, "uses data from", "JDBC")
'Rel_D(datapoolA, share, "sends invite to share", "technology")
'Rel_D(datapoolB, share, "sends invite to share", "technology")
'Rel_D(datapoolC, share, "sends invite to share", "technology")
'Rel(elasticcompute, datalake, "uses data from", Build-in connector)
Rel(dataikuA, integration, "integrate with")
Lay_D(datapoolC, discovery)
Lay_D(datapoolB, discovery)
Lay_D(datapoolA, discovery)

footer drawn by Ilco Zeggelaar with PlantUML v. %version() and C4-PlantUML v. C4Version() 

@enduml